test_pod:
  image: bats/bats:v1.1.0
  pullPolicy: IfNotPresent

loki:
  enabled: true
  isDefault: true
  url: http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  datasource:
    jsonData: {}
    uid: ""


  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "http-metrics"

  podManagementPolicy: OrderedReady

  rbac:
    create: true
    pspEnabled: true

  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  replicas: 1

  resources: {}
  securityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001

  containerSecurityContext:
    readOnlyRootFilesystem: true

  serviceAccount:
    create: true
    name:
    annotations: {}
    automountServiceAccountToken: true

  terminationGracePeriodSeconds: 4800

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  ## Topology spread constraint for multi-zone clusters
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints:
    enabled: false

  podDisruptionBudget: {}
  updateStrategy:
    type: RollingUpdate

  serviceMonitor:
    enabled: false
    interval: ""
    additionalLabels: {}
    annotations: {}
    # scrapeTimeout: 10s
    # path: /metrics
    prometheusRule:
      enabled: false
      additionalLabels: {}
    #  namespace:
      rules: []
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []

  extraPorts: []
  env: []
  alerting_groups: []
  useExistingAlertingGroup:
    enabled: false
    configmapName: ""


promtail:
  enabled: true
  config:
    logLevel: info
    serverPort: 3101
    clients:
      - url: http://demo-grafana-loki:3100/loki/api/v1/push

fluent-bit:
  enabled: false

grafana:
  enabled: true
  sidecar:
    datasources:
      enabled: true
      maxLines: 1000
  image:
    tag: 8.3.5
    dashboardProviders: 
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default

  dashboardsConfigMaps:
    default: "grafana-dashboards"
      


  grafana.ini:
  # paths:
  #   data: /var/lib/grafana/
  #   logs: /var/log/grafana
  #   plugins: /var/lib/grafana/plugins
  #   provisioning: /etc/grafana/provisioning
  # analytics:
  #   check_for_updates: false
  # log:
  #   mode: console
  # grafana_net:
  #   url: https://grafana.net
  # server:
  #   domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ end }}"
    auth.ldap:
      enabled: true
      allow_sign_up: true
      config_file: /etc/grafana/ldap.toml



prometheus:
  enabled: false
  isDefault: false
  url: http://{{ include "prometheus.fullname" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}
  datasource:
    jsonData: {}

